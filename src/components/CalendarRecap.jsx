import React, { useState, useCallback, useEffect } from 'react';
import { View, Text, StyleSheet, Pressable } from 'react-native';
import { Agenda, LocaleConfig } from 'react-native-calendars';
import { useNavigation, useRoute } from '@react-navigation/native';

LocaleConfig.locales['fr'] = {
  monthNames: [
    'Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin',
    'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre',
  ],
  dayNames: ['Dimanche', 'Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi'],
  dayNamesShort: ['Dim.', 'Lun.', 'Mar.', 'Mer.', 'Jeu.', 'Ven.', 'Sam.'],
};
LocaleConfig.defaultLocale = 'fr';

const AutoGeneratedAgenda = () => {
  const navigation = useNavigation();
  const route = useRoute();
  const { userId } = route.params || {};
  const [items, setItems] = useState({});

  const loadItems = useCallback(day => {
    const newItems = {};
    for (let i = -15; i < 85; i++) {
      const time = day.timestamp + i * 24 * 60 * 60 * 1000;
      const strTime = timeToString(time);
      if (!newItems[strTime]) {
        newItems[strTime] = [{ name: 'Pas de repas prévue !', timestamp: time }];
      }
    }
    setItems(newItems);
  }, []);

  const renderItem = item => {
    const date = new Date(item.timestamp);
    return (
      <Pressable
        onPress={() =>
          navigation.navigate('MealPlannerScreen', { userId: userId, date: date.toISOString() })
        }>
        <View style={styles.item}>
          <Text style={styles.itemText}>{item.name}</Text>
        </View>
      </Pressable>
    );
  };

  const renderEmptyDate = () => {
    return (
      <Pressable onPress={() => navigation.navigate('MealPlannerScreen', { userId: userId })}>
        <View style={styles.emptyDate} />
      </Pressable>
    );
  };

  useEffect(() => {
    loadItems({ timestamp: Date.now() });
  }, [loadItems]);

  const today = new Date();

  return (
    <View style={styles.container}>
      {Object.keys(items).map((dateKey, index) => {
        if (index % 2 === 0) {
          return (
            <View style={styles.row} key={dateKey}>
              <View style={styles.column}>
                {renderItem(items[dateKey][0])}
              </View>
              {items[Object.keys(items)[index + 1]] && (
                <View style={styles.column}>
                  {renderItem(items[Object.keys(items)[index + 1]][0])}
                </View>
              )}
            </View>
          );
        }
      })}
      <Agenda
          items={items}
          loadItemsForMonth={loadItems}
          renderItem={renderItem}
          renderEmptyDate={renderEmptyDate}
          hideKnob={true}  // Cache le bouton pour masquer/afficher le calendrier
          renderDay={() => null} // Cache les jours du calendrier
          renderEmptyData={() => <View />} // Cache la vue calendrier
          rowHasChanged={(r1, r2) => r1.name !== r2.name}
          pastScrollRange={50}
          futureScrollRange={50}
          minDate={today.toISOString().split('T')[0]}
          theme={{
            agendaDayNumColor: '#f9f9f9', // Change la couleur du texte des jours pour correspondre au fond
            agendaDayTextColor: '#f9f9f9', // Change la couleur du texte des jours pour les rendre invisibles
            agendaTodayColor: '#f9f9f9', // Cache la date d'aujourd'hui
            agendaKnobColor: '#f9f9f9', // Cache le bouton pour faire défiler
            backgroundColor: '#f9f9f9', // Fond de la vue calendrier similaire au reste
          }}
      />
    </View>
  );
};

const timeToString = time => {
  const date = new Date(time);
  return date.toISOString().split('T')[0];
};

const styles = StyleSheet.create({
  container: {
    flexDirection: 'column',
    paddingHorizontal: 10,
    paddingVertical: 10,
    backgroundColor: '#f9f9f9',
  },
  row: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 10,
  },
  column: {
    width: '48%', // Pour avoir 2 colonnes avec espace entre elles
  },
  item: {
    backgroundColor: '#fff',
    borderRadius: 8,
    borderColor: '#dcdcdc',
    borderWidth: 1, // Bordure similaire à votre exemple
    paddingVertical: 15,
    paddingHorizontal: 10,
    marginBottom: 10,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  itemText: {
    color: '#888',
    fontSize: 18,
    fontWeight: '500', // Texte avec un style similaire
  },
  emptyDate: {
    height: 15,
    flex: 1,
    paddingTop: 30,
    backgroundColor: '#f9f9f9', // Pour un fond vide
  },
});

export default AutoGeneratedAgenda;
